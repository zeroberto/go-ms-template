package dataservice

import (
	"time"

	"github.com/zeroberto/go-ms-template/model"
)

// ExampleDataService is responsible for providing the methods of accessing
// the data of the Example model
type ExampleDataService interface {
	// Create is responsible for persisting an Example in the repository
	Create(example *model.Example) (persistedExample *model.Example, err error)
	// Delete is responsible for physically removing Example from the repository
	Delete(ID int64) error
	// FindActives is responsible for returning all examples that are active from the repository
	FindActives() ([]model.Example, error)
	// FindAll is responsible for returning all examples from the repository
	FindAll() ([]model.Example, error)
	// FindByID is responsible for returning an Example from the repository
	FindByID(ID int64) (*model.Example, error)
	// FindByName is responsible for returning an Example from the repository according to the name
	FindByName(name string) (*model.Example, error)
	// LogicalDeletion is responsible for removing Example logically from the repository
	LogicalDeletion(ID int64, deactivationDatetime time.Time) error
	// Update is responsible for updating an existing Example in the repository
	Update(example *model.Example) (updatedExample *model.Example, err error)
	// UpdateProperty is responsible for updating a particular Example property in the repository
	UpdateProperties(ID int64, properties map[string]interface{}) error
}

// Error is responsible for encapsulating errors generated by operations in the data access layer
type Error struct {
	Cause error
}

func (err *Error) Error() string {
	return err.Cause.Error()
}
